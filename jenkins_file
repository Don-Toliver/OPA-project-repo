pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/Don-Toliver/OPA-project-repo'
            }
        }
        stage('Install dependencies') {
            steps {
                sh 'terraform init'
                sh 'curl -Lo opa https://github.com/open-policy-agent/opa/releases/latest/download/opa_linux_amd64'
                sh 'chmod +x opa'
                sh 'sudo mv opa /usr/local/bin/'
            }
        }
        stage('Check Existing S3 Bucket') {
            steps {
                script {
                    def bucketExists = sh(script: 'aws s3api head-bucket --bucket my-cicd-bucket-ap-south-1', returnStatus: true) == 0
                    if (bucketExists) {
                        echo "Bucket already exists. Importing into Terraform."
                        sh 'terraform import aws_s3_bucket.example my-cicd-bucket-ap-south-1'
                    } else {
                        echo "Bucket does not exist. Proceeding to create."
                    }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                script {
                    def planFile = 'tfplan'
                    sh "terraform plan -out=${planFile}"
                    sh "terraform show -json ${planFile} > tfplan.json"  // Create tfplan.json
                }
            }
        }
        stage('Policy Check') {
            steps {
                script {
                    // Add this line to see the content of tfplan.json for debugging
                    sh "cat tfplan.json"  // Debug line to view the JSON structure
                    def policyCheck = sh(script: 'opa eval --data policy.rego --input tfplan.json "data.example.s3.violation"', returnStatus: true)
 
                    // If OPA policy violation is found, fail the build
                    if (policyCheck != 0) {
                        error("OPA policy violation detected. Failing the build.")
                    } else {
                        echo "OPA policy check passed."
                    }
                }
            }
        }
        stage('Terraform Apply') {
            steps {
                sh "terraform apply -auto-approve tfplan"
            }
        }
    }
}


